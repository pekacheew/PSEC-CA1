# StudentID:	p2136798
# Name:	        Gan Hanyong
# Class:		DISM/FT/1B/02   
# Assessment:	CA1
# 
# Script name:	rwaFiles.py
# 
# Purpose:  	Reusable read, write, append Functions
#
# Usage syntax:	F5
#
# Input file:	Specify full path, 'D:\SP School\Y1 SEM2\PSEC\CA1(submit this)\csv\userid_pswd.csv'
#                                  'D:\SP School\Y1 SEM2\PSEC\CA1(submit this)\csv\quiz_settings.csv'
#                                  'D:\SP School\Y1 SEM2\PSEC\CA1(submit this)\csv\question_pool.csv'
#                                  'D:\SP School\Y1 SEM2\PSEC\CA1(submit this)\csv\quiz_results.csv'
# 
# Output file:	Specify full path, 'D:\SP School\Y1 SEM2\PSEC\CA1(submit this)\csv\userid_pswd.csv'
#                                  'D:\SP School\Y1 SEM2\PSEC\CA1(submit this)\csv\quiz_settings.csv'
#                                  'D:\SP School\Y1 SEM2\PSEC\CA1(submit this)\csv\question_pool.csv'
#                                  'D:\SP School\Y1 SEM2\PSEC\CA1(submit this)\csv\quiz_results.csv'
# 
# Python ver:	Python 3.9.7

IMPORT random

########################## userid_pswd.csv #######################

# Remove spacing IN list function

DEFINE FUNCTION rmvSpaceID():

    with open('./CA1(submit this)/csv/userid_pswd.csv','r+') as csvFile:

        SET csvFileR TO csvFile.readlines()

        FOR i IN csvFileR:

            IF i EQUALS '\n':

                csvFileR.remove(i)

        csvFile.seek(0)

        csvFile.truncate()

        FOR n IN csvFileR:

            csvFile.write(n)

        csvFile.close()



# Check IF User already Exist 

DEFINE FUNCTION regUsrIDone(userID):

    with open('./CA1(submit this)/csv/userid_pswd.csv','r+') as csvFile:

            SET csvFileR TO csvFile.readlines()

            FOR i IN csvFileR:

                SET exUserID TO i.split(sep=',')

                IF userID EQUALS exUserID[0]:

                    OUTPUT("User already exists.")

                    csvFile.close()

                    RETURN True



            ELSE:

                csvFile.close()

                RETURN False



# Check IF User Exist 

DEFINE FUNCTION regUsrIDtwo(userID,aOrU):

    with open('./CA1(submit this)/csv/userid_pswd.csv','r+') as csvFile:

            SET csvFileR TO csvFile.readlines()

            FOR i IN csvFileR:

                SET exUserID TO i.split(sep=',')

                SET stripUserID TO exUserID[2].strip('\n')

                IF userID EQUALS exUserID[0]:

                    #check IF user is admin or user account

                    IF aOrU EQUALS stripUserID:

                        

                        csvFile.close()

                        RETURN False

            ELSE:

                csvFile.close()

                RETURN True

                

# check IF user is admin or user account

DEFINE FUNCTION adminORuser(userID):

    with open('./CA1(submit this)/csv/userid_pswd.csv','r+') as csvFile:

            SET csvFileR TO csvFile.readlines()

            FOR i IN csvFileR:

                SET exUserID TO i.split(sep=',')

                SET stripExUserID TO exUserID[2].strip('\n')

                IF userID EQUALS exUserID[0]:

                    #check IF user is admin or user account

                    IF stripExUserID EQUALS 'a':

                        csvFile.close()

                        RETURN False

                    ELSEIF stripExUserID EQUALS 'u':

                        csvFile.close()

                        RETURN True

            ELSE:

                csvFile.close()

                RETURN True



# write New User into userid_pswd.csv

DEFINE FUNCTION newUsr(writeIntoFile):

    with open('./CA1(submit this)/csv/userid_pswd.csv','r+') as csvFile:

        SET csvFileR TO csvFile.readlines()



        csvFileR.append(f'\n{writeIntoFile}')

    with open('./CA1(submit this)/csv/userid_pswd.csv','w') as csvFile:

        FOR n IN csvFileR:

            csvFile.write(n)



        csvFile.close()



# check IF password is correct

DEFINE FUNCTION usrPswd(userID,userPswd):

    with open('./CA1(submit this)/csv/userid_pswd.csv','r+') as csvFile:

            SET csvFileR TO csvFile.readlines()

            

            FOR i IN csvFileR:

                SET attempts TO i.split(sep=',')

                SET stripAttempts TO attempts[1].strip('\n')

                

                IF userID EQUALS attempts[0] and userPswd EQUALS stripAttempts:

                    OUTPUT("Correct Password")

                    csvFile.close()

                    RETURN False

                ELSEIF userID EQUALS attempts[0] and userPswd != stripAttempts:

                    OUTPUT("Wrong password")

                    csvFile.close()

                    RETURN True

            ELSE:

                PASS



# update new password of existing user

DEFINE FUNCTION editPswd(userID,newuserPswd):

    with open('./CA1(submit this)/csv/userid_pswd.csv','r+') as csvFile:

        SET csvFileR TO csvFile.readlines()



        FOR i IN range(len(csvFileR)):

            SET attempts TO csvFileR[i].split(sep=',')



            IF userID EQUALS attempts[0]:

                SET toAppend TO userID + ',' + newuserPswd + ',' + attempts[2] +',' + attempts[3] +',' +attempts[4] +',' + attempts[5]+'\n'

                SET csvFileR[i] TO toAppend

                

    with open('./CA1(submit this)/csv/userid_pswd.csv', 'w') as csvFile:

        FOR n IN csvFileR:

            

            csvFile.write(n)



        csvFile.close()

    



# remove User

DEFINE FUNCTION removeUsr(userID):

    with open('./CA1(submit this)/csv/userid_pswd.csv','r+') as csvFile:    

        SET csvFileR TO csvFile.readlines()

    

        FOR i IN csvFileR:

            SET userIDsplit TO i.split(sep=',')

            IF userID EQUALS userIDsplit[0]:

                csvFileR.remove(i)

        csvFile.close()

    with open('./CA1(submit this)/csv/userid_pswd.csv', 'w') as csvFile:

        FOR n IN csvFileR:

            csvFile.write(n)



        csvFile.close()



# retrieve user list

DEFINE FUNCTION usrList():

    with open('./CA1(submit this)/csv/userid_pswd.csv','r+') as csvFile:    

        SET csvFileR TO csvFile.readlines()

        SET r TO 0



        FOR i IN csvFileR:

            r += 1

            SET userIDsplit TO i.split(sep=',')

            OUTPUT(str(r)+'. '+userIDsplit[0])



        csvFile.close()



# check attempts

DEFINE FUNCTION usrAttempts(userID):

    with open('./CA1(submit this)/csv/userid_pswd.csv','r+') as csvFile:

        SET csvFileR TO csvFile.readlines()

        

        FOR i IN csvFileR:

            SET attempts TO i.split(sep=',')

            SET stripAttempts TO attempts[3].strip('\n')

            

            IF userID EQUALS attempts[0] and stripAttempts EQUALS '999':

                OUTPUT("\nUnlimited attempts.\n")

                csvFile.close()

                RETURN False

            ELSEIF userID EQUALS attempts[0] and stripAttempts EQUALS '4':

                OUTPUT("\n4 Attempts Remaining\n")

                csvFile.close()

                RETURN False

            ELSEIF userID EQUALS attempts[0] and stripAttempts EQUALS '3':

                OUTPUT("\n3 Attempts Remaining\n")

                csvFile.close()

                RETURN False

            ELSEIF userID EQUALS attempts[0] and stripAttempts EQUALS '2':

                OUTPUT("\n2 Attempts Remaining\n")

                csvFile.close()

                RETURN False

            ELSEIF userID EQUALS attempts[0] and stripAttempts EQUALS '1':

                OUTPUT("\n1 Attempt Remaining\n")

                csvFile.close()

                RETURN False

            ELSEIF userID EQUALS attempts[0] and stripAttempts EQUALS '0':

                OUTPUT("\n0 Attempts Remaining, RETURNing to main menu.\n")

                csvFile.close()

                RETURN True

            

        ELSE:

            PASS



# update attempt count

DEFINE FUNCTION attemptCount(userID):

    with open('./CA1(submit this)/csv/userid_pswd.csv','r+') as csvFile:

        SET csvFileR TO csvFile.readlines()



        FOR i IN range(len(csvFileR)):

            SET attempts TO csvFileR[i].split(sep=',')

            SET newAttempt TO int(attempts[3]) - 1 





            IF userID EQUALS attempts[0]:

                SET toAppend TO attempts[0] + ',' + attempts[1] + ',' + attempts[2] +',' + str(newAttempt)+',' + attempts[4] + ',' + attempts[5] 

                SET csvFileR[i] TO toAppend

                

    with open('./CA1(submit this)/csv/userid_pswd.csv', 'w') as csvFile:

        FOR n IN csvFileR:

            

            csvFile.write(n)



        csvFile.close()



# Reset all Attempts

DEFINE FUNCTION resetAttempt():

    with open('./CA1(submit this)/csv/userid_pswd.csv', 'r+') as csvFile:

        SET csvFileR TO csvFile.readlines()



        FOR i IN range(len(csvFileR)):

            SET userIdSplit TO csvFileR[i].split(sep=',')



            IF adminORuser(userIdSplit[0]) EQUALS True:

                SET toAppend TO userIdSplit[0] + ',' + userIdSplit[1] + ',' + userIdSplit[2] +',' + str(qzSettings(3)) +',' +userIdSplit[4] +',' +userIdSplit[5]

                SET csvFileR[i] TO toAppend



    with open('./CA1(submit this)/csv/userid_pswd.csv', 'w') as csvFile:

        FOR n IN csvFileR:

            csvFile.write(n)

        csvFile.close()





# Plus 1 Attempt to all users

DEFINE FUNCTION plusAttempt():

    with open('./CA1(submit this)/csv/userid_pswd.csv', 'r+') as csvFile:

        SET csvFileR TO csvFile.readlines()



        FOR i IN range(len(csvFileR)):

            SET userIdSplit TO csvFileR[i].split(sep=',')

            IF adminORuser(userIdSplit[0]) EQUALS True:

                SET toAppend TO userIdSplit[0] + ',' + userIdSplit[1] + ',' + userIdSplit[2] +',' + str(int(userIdSplit[3])+int(1)) + ',' +userIdSplit[4] +',' +userIdSplit[5]

                SET csvFileR[i] TO toAppend

    with open('./CA1(submit this)/csv/userid_pswd.csv', 'w') as csvFile:

            FOR n IN csvFileR:

                csvFile.write(n)

            csvFile.close()



# Minus 1 Attempt to all user

DEFINE FUNCTION minusAttempt():

    with open('./CA1(submit this)/csv/userid_pswd.csv', 'r+') as csvFile:

        SET csvFileR TO csvFile.readlines()



        FOR i IN range(len(csvFileR)):

            SET userIdSplit TO csvFileR[i].split(sep=',')

            IF adminORuser(userIdSplit[0]) EQUALS True:

                SET toAppend TO userIdSplit[0] + ',' + userIdSplit[1] + ',' + userIdSplit[2] +',' + str(int(userIdSplit[3])-int(1)) +',' +userIdSplit[4] +',' +userIdSplit[5]

                SET csvFileR[i] TO toAppend

    with open('./CA1(submit this)/csv/userid_pswd.csv', 'w') as csvFile:

            FOR n IN csvFileR:

                csvFile.write(n)

            csvFile.close()



# Set to unlimited attempts

DEFINE FUNCTION unlimitedAttempt():

    with open('./CA1(submit this)/csv/userid_pswd.csv', 'r+') as csvFile:

        SET csvFileR TO csvFile.readlines()



        FOR i IN range(len(csvFileR)):

            SET userIdSplit TO csvFileR[i].split(sep=',')

            IF adminORuser(userIdSplit[0]) EQUALS True:

                SET toAppend TO userIdSplit[0] + ',' + userIdSplit[1] + ',' + userIdSplit[2] +',' + str(999) +',' +userIdSplit[4] +',' +userIdSplit[5]

                SET csvFileR[i] TO toAppend

    with open('./CA1(submit this)/csv/userid_pswd.csv', 'w') as csvFile:

            FOR n IN csvFileR:

                csvFile.write(n)

            csvFile.close()



# Check User Input against Secret Answer

DEFINE FUNCTION secretA(userID,secretAns):

    with open('./CA1(submit this)/csv/userid_pswd.csv','r+') as csvFile:

                SET csvFileR TO csvFile.readlines()

                FOR i IN csvFileR:

                    SET attempts TO i.split(sep=',')

                    SET stripAttempts TO attempts[5].strip('\n')

                    

                    IF userID EQUALS attempts[0] and secretAns EQUALS stripAttempts:

                        OUTPUT("Correct")

                        csvFile.close()

                        RETURN False

                    ELSEIF userID EQUALS attempts[0] and secretAns != stripAttempts:

                        OUTPUT("Wrong")

                        csvFile.close()

                        RETURN True

                ELSE:

                    PASS



# OUTPUT user's secret question

DEFINE FUNCTION secretQ(userID):

    OUTPUT()

    with open('./CA1(submit this)/csv/userid_pswd.csv','r+') as csvFile:    

        SET csvFileR TO csvFile.readlines()



        FOR i IN csvFileR:

            SET userIDsplit TO i.split(sep=',')

            IF userID EQUALS userIDsplit[0]:

                RETURN userIDsplit[4]



        csvFile.close()

########################## quiz_settings.csv #######################

# quiz timer

DEFINE FUNCTION quizTimer(newTime,selection):

    with open('./CA1(submit this)/csv/quiz_settings.csv','r+') as csvFile:

            SET csvFileR TO csvFile.readlines()



            FOR i IN range(len(csvFileR)):

                SET qzSet TO csvFileR[i].split(sep=',')

                IF qzSet[0] EQUALS selection:

                    SET toAppend TO str(selection) + ', ' + str(newTime) + '\n'

                    SET csvFileR[i] TO toAppend

                

    with open('./CA1(submit this)/csv/quiz_settings.csv', 'w') as csvFile:

        FOR n IN csvFileR:

            

            csvFile.write(n)



        csvFile.close()



# get quiz settings data

DEFINE FUNCTION qzSettings(INPUT):

    with open('./CA1(submit this)/csv/quiz_settings.csv','r+') as csvFile:

        SET qzSettingsVessel TO []                      

        SET csvFileR TO csvFile.readlines()

        FOR i IN csvFileR:

            

            qzSettingsVessel.append(i.split(',')[1])



        IF INPUT EQUALS 1:                              #timer

            SET variable TO int(qzSettingsVessel[0]) 

            RETURN variable

        ELSEIF INPUT EQUALS 2:                           #num of questions

            SET variable TO int(qzSettingsVessel[1]) 

            RETURN variable

        ELSEIF INPUT EQUALS 3:                          #attempts

            SET variable TO int(qzSettingsVessel[2]) 

            RETURN variable



########################## question_pool.csv #######################

# remove space IN question_pool

DEFINE FUNCTION rmvSpaceQn():

    with open('./CA1(submit this)/csv/question_pool.csv','r+') as csvFile:

        SET csvFileR TO csvFile.readlines()

        FOR i IN csvFileR:

            IF i EQUALS '\n':

                csvFileR.remove(i)

        csvFile.seek(0)

        csvFile.truncate()

        FOR n IN csvFileR:

            csvFile.write(n)

        csvFile.close()



# check IF question already exists

DEFINE FUNCTION regQnone(qn):

    with open('./CA1(submit this)/csv/question_pool.csv','r+') as csvFile:

            SET csvFileR TO csvFile.readlines()

            FOR i IN csvFileR:

                SET qnPool TO i.split(sep=',')

                IF qn EQUALS qnPool[0]:

                    OUTPUT("Question already exists.")

                    csvFile.close()

                    RETURN True



            ELSE:

                csvFile.close()

                RETURN False



# check IF question exists to be edited.

DEFINE FUNCTION regQntwo(qnToDel):

    with open('./CA1(submit this)/csv/question_pool.csv','r+') as csvFile:

            SET csvFileR TO csvFile.readlines()

            FOR i IN csvFileR:

                SET qnPool TO i.split(sep=',')

                IF qnToDel EQUALS qnPool[0]:

                    OUTPUT("Question exists.")

                    csvFile.close()

                    RETURN False



            ELSE:

                OUTPUT("Question does not exist.")

                csvFile.close()

                RETURN True



# add new line of question IN

DEFINE FUNCTION addQuestion(newQuestion):

    with open('./CA1(submit this)/csv/question_pool.csv','r+') as csvFile:

        SET csvFileR TO csvFile.readlines()



        csvFileR.append(f'\n{newQuestion}')

    with open('./CA1(submit this)/csv/question_pool.csv','w') as csvFile:

        FOR n IN csvFileR:

            csvFile.write(n)



        csvFile.close()

    rmvSpaceQn()

            

# remove question

DEFINE FUNCTION removeQn(qnDel):

    with open('./CA1(submit this)/csv/question_pool.csv','r+') as csvFile:    

        SET csvFileR TO csvFile.readlines()

    

        FOR i IN csvFileR:

            SET qnSplit TO i.split(sep=',')

            IF qnDel EQUALS qnSplit[0]:

                csvFileR.remove(i)

        csvFile.close()

    with open('./CA1(submit this)/csv/question_pool.csv', 'w') as csvFile:

        FOR n IN csvFileR:

            csvFile.write(n)



        csvFile.close()



# retrieve Question list

DEFINE FUNCTION qnList():

    with open('./CA1(submit this)/csv/question_pool.csv','r+') as csvFile:    

        SET csvFileR TO csvFile.readlines()

        SET r TO 0



        FOR i IN csvFileR:

            r += 1

            SET qnSplit TO i.split(sep=',')

            OUTPUT('\n\t'+str(r)+'. '+qnSplit[0])

            OUTPUT(f"\ta) {qnSplit[1]}")

            OUTPUT(f"\tb) {qnSplit[2]}")

            OUTPUT(f"\tc) {qnSplit[3]}")

            OUTPUT(f"\td) {qnSplit[4]}")

            OUTPUT(f"\t(ANS): {qnSplit[5]}")



        csvFile.close()



# edit question into question_pool.csv

DEFINE FUNCTION editQn(qn,newChg,index):

    with open('./CA1(submit this)/csv/question_pool.csv','r+') as csvFile:

        SET csvFileR TO csvFile.readlines()

        rmvSpaceQn()

        FOR i IN range(len(csvFileR)):

            SET qnPool TO csvFileR[i].split(sep=',')



            IF qn EQUALS qnPool[0]:

                IF index EQUALS 0:

                    SET toAppend TO f'{newChg},{qnPool[1]},{qnPool[2]},{qnPool[3]},{qnPool[4]},{qnPool[5]}\n'

                    SET csvFileR[i] TO toAppend

                ELSEIF index EQUALS 1:

                    SET toAppend TO f'{qnPool[0]},{newChg},{qnPool[2]},{qnPool[3]},{qnPool[4]},{qnPool[5]}\n'

                    SET csvFileR[i] TO toAppend

                ELSEIF index EQUALS 2:

                    SET toAppend TO f'{qnPool[0]},{qnPool[1]},{newChg},{qnPool[3]},{qnPool[4]},{qnPool[5]}\n'

                    SET csvFileR[i] TO toAppend

                ELSEIF index EQUALS 3:

                    SET toAppend TO f'{qnPool[0]},{qnPool[1]},{qnPool[2]},{newChg},{qnPool[4]},{qnPool[5]}\n'

                    SET csvFileR[i] TO toAppend

                ELSEIF index EQUALS 4:

                    SET toAppend TO f'{qnPool[0]},{qnPool[1]},{qnPool[2]},{qnPool[3]},{newChg},{qnPool[5]}\n'

                    SET csvFileR[i] TO toAppend

                ELSEIF index EQUALS 5:

                    SET toAppend TO f'{qnPool[0]},{qnPool[1]},{qnPool[2]},{qnPool[3]},{qnPool[4]},{newChg}\n'

                    SET csvFileR[i] TO toAppend



        rmvSpaceQn()



    with open('./CA1(submit this)/csv/question_pool.csv', 'w') as csvFile:

        FOR n IN csvFileR:

            

            csvFile.write(n)



        csvFile.close()





########################## quiz_results.csv #######################

# write into quiz results

DEFINE FUNCTION wResults(resultToWrite):

    with open('./CA1(submit this)/csv/quiz_results.csv','r+') as csvFile:

        SET csvFileR TO csvFile.readlines()



        csvFileR.append(f'\n{resultToWrite}')

    with open('./CA1(submit this)/csv/quiz_results.csv','w') as csvFile:

        FOR n IN csvFileR:

            csvFile.write(n)



        csvFile.close()



# remove space FOR quiz_results.csv

DEFINE FUNCTION rmvSpaceR():

    with open('./CA1(submit this)/csv/quiz_results.csv','r+') as csvFile:

        SET csvFileR TO csvFile.readlines()

        FOR i IN csvFileR:

            IF i EQUALS '\n':

                csvFileR.remove(i)

        csvFile.seek(0)

        csvFile.truncate()

        FOR n IN csvFileR:

            csvFile.write(n)

        csvFile.close()



# retrieve entire quiz results

DEFINE FUNCTION resultList():

    with open('./CA1(submit this)/csv/quiz_results.csv','r+') as csvFile:    

        SET csvFileR TO csvFile.readlines()

        SET r TO 0



        FOR i IN csvFileR:

            r += 1

            SET resultPool TO i.split(sep=',')

            SET stripResultPool TO resultPool[3].strip('\n')

            OUTPUT(f"{str(r)}. {resultPool[0]} scored {resultPool[1]} marks. {resultPool[2]}%. Timestamp: {stripResultPool}")



        csvFile.close()
