# StudentID:	p2136798
# Name:	        Gan Hanyong
# Class:		DISM/FT/1B/02   
# Assessment:	CA1
#
# Script name:	User.py
# 
# Purpose:  	For users to register account, to start a quiz attempt, or do reset password.
#
# Usage syntax:	F5
# 
# Input file: (reading FROM)	Specify full path, 'D:\SP School\Y1 SEM2\PSEC\CA1(submit this)\csv\userid_pswd.csv'
# 
# Output file: (writing to)	Specify full path, 'D:\SP School\Y1 SEM2\PSEC\CA1(submit this)\csv\quiz_results.csv'
# 
# Python ver:	Python 3.9.7


from rwaFiles IMPORT *

from cipher IMPORT *

from verifiers IMPORT *

from datetime IMPORT datetime

IMPORT time

IMPORT threading

SET userID TO ''

SET modelAns TO []

SET ansList TO []

SET noOfQns TO qzSettings(2)

SET timer TO 0

############################################ Start of Countdown ############################################

DEFINE FUNCTION countdown():

    global timer

    timer *=  60                                                                    # TIMER IN minutes * 60 seconds

    FOR i IN range(timer):

        timer-=1

        time.sleep(1)



############################################ Start of Quiz Results ############################################

DEFINE FUNCTION quizResult():                           

    global modelAns

    global ansList

    SET totalMarks TO 0



    FOR f IN range(len(modelAns)):

        IF ansList[f] EQUALS modelAns[f]:                                               # check IF answer is correct

            totalMarks += 2                                                         # FOR every answer that is correct, add 2 marks

        ELSE:

            PASS

    

    OUTPUT(f'\nTotal Marks: {totalMarks}')                                           # OUTPUT total marks attained

    

    SET fullMarks TO len(ansList)*2

    IF totalMarks EQUALS 0:

        SET percentage TO 0.0

    ELSE:

        SET percentage TO totalMarks / fullMarks * 100                                   # calculate percentage

    OUTPUT(f"\nYou've scored {percentage}%.")                                        # OUTPUT out percentage of marks attained

    

    IF percentage >= 50 and percentage < 60:                                        # OUTPUT out grade

        OUTPUT("That's a D grade. You can do better!")

    ELSEIF percentage >= 60 and percentage < 70:

        OUTPUT("That's a C grade. Keep it up!")

    ELSEIF percentage >= 70 and percentage < 80:

        OUTPUT("That's a B grade. Almost there!")

    ELSEIF percentage >= 80 and percentage <= 100:

        OUTPUT("That's an A grade. Good job!")

    ELSE:

        OUTPUT("You have failed the test. Study harder!")

    

    SET current_date_time TO datetime.now().strftime("%Y-%m-%d %H:%M:%S")                # date & time



    #write results into quiz_results.csv

    SET resultToWrite TO (f"{userID},{str(totalMarks)},{str(percentage)},{current_date_time}")

    wResults(resultToWrite)

    rmvSpaceR()

    

    SET tOrF TO True

    IF tOrF EQUALS True:

        SET tOrF TO adminORuser(userID)                                                  # check IF user is admin or user

        IF tOrF EQUALS True:                                                            # IF user:

            attemptCount(userID)                                                    # take away 1 attempt count from user



    DEFINE FUNCTION newAttempt():

        SET tOrF TO True

        WHILE tOrF:

            SET userInput TO INPUT("Do you want to try again (y|n)? ")

            SET tOrF TO yOrN(userInput)

        IF userInput EQUALS 'y':

            beginQuiz()

        ELSE:

            exit()



    newAttempt()                                                                    # end of program



############################################ Start of Begin Quiz ############################################

DEFINE FUNCTION beginQuiz():

    global ansList

    global modelAns

    global userID

    SET ansList TO [0] * noOfQns # e.g. ansList TO [0,0,0,0,0] [b,c,b,0,d] [a,b,c,d]

    

    SET attemptsLeft TO usrAttempts(userID)                                              # check attempts left

    IF attemptsLeft EQUALS True:                                                        # IF 0 attempts left, RETURN to menu

        startUser()

    

    OUTPUT(f"Hi {userID}, please choose the best answer FOR the questions.")

    OUTPUT(f"Time allowed: {qzSettings(1)} minute(s).")                              # get timer from quiz setting



    with open('./CA1(submit this)/csv/question_pool.csv', 'r') as csvFile:

        SET csvFileR TO csvFile.readlines()

        random.shuffle(csvFileR)                                                    # shuffle questions

    

    DEFINE FUNCTION qnNP():

        global timer

        SET timer TO qzSettings(1)                                                       # get TIMER IN minutes from qzSettings

        global modelAns      

        SET modelAns TO []                                                               # Print and Answer Questions

        SET qnNum TO 0



        SET cdthread TO threading.Thread(target TO countdown)                             # threading target countdown TIMER function

        cdthread.start()                                                            # initiate threading function



        WHILE qnNum < noOfQns:

            SET qnPool TO csvFileR[qnNum].split(sep=',')

            OUTPUT(f'\n\tQuestion {qnNum+1}: '+qnPool[0]+'\n')

            OUTPUT(f'\ta) {qnPool[1]}\n\tb) {qnPool[2]}\n\tc) {qnPool[3]}\n\td) {qnPool[4]}\n')

            modelAns.append(qnPool[5])

            

            FOR i IN range(len(modelAns)):

                SET modelAns[i] TO modelAns[i].strip('\n')   # FOR e.g. modelAns TO [a\n,b\n,c\n,a\n,a\n] -> [a,b,c,a,a]

            SET usrAns TO quizOption(qnNum)                                              # ask FOR user INPUT a,b,c,d,P,N & verify INPUT



            IF qnNum < noOfQns:

                IF usrAns EQUALS 'N':                                                   # move on to next question

                    qnNum += 0

                ELSEIF usrAns EQUALS 'P':                                                 # move back to previous question

                    qnNum -= 2

                ELSE:

                    SET ansList[qnNum] TO usrAns                                         # insert user's answer into his answer list

            

            ELSEIF qnNum >= noOfQns:

                OUTPUT()



            IF timer EQUALS 0:                                                          # IF TIMER reaches 0, auto submit quiz

                OUTPUT("You have ran out of time. Submitting quiz automatically...")

                time.sleep(3)

                quizResult()

            

            qnNum += 1                                                              # increment question Number

        

        # OUTPUT summary screen of all questions n answers provided

        SET qnNumber TO 0

        WHILE qnNumber < noOfQns:

            SET qnPool TO csvFileR[qnNumber].split(sep=',')

            OUTPUT(f'\n\tQuestion {qnNumber+1}: '+qnPool[0]+'\n')

            OUTPUT(f'\ta) {qnPool[1]}\n\tb) {qnPool[2]}\n\tc) {qnPool[3]}\n\td) {qnPool[4]}\n\t(Your Answer) >>> {ansList[qnNumber]}')

            qnNumber += 1

    



    qnNP()



    SET tOrF TO True

    WHILE tOrF EQUALS True:

        SET submission TO INPUT("\nEnter 0 to submit or 1 to make changes: ")            # ask user to confirm submission or to change answer

        IF submission EQUALS "0":

            SET tOrF TO False

            quizResult()

        ELSEIF submission EQUALS "1":

            SET tOrF TO True

            qnNP()

        ELSE:

            OUTPUT("Please enter a valid INPUT.")

            SET tOrF TO True



############################################ Start of User Login ############################################

DEFINE FUNCTION usrLogin():

    SET tOrF TO True

    SET passCount TO True

    SET passCounter TO 0

    SET idCounter TO 0

    SET idCount TO True

    global userID

    

    WHILE tOrF EQUALS True and idCount EQUALS True:

        SET userID TO INPUT("\nPlease enter the user's ID: ")                            # check IF userID exists, IF not, ask again

        SET tOrF TO regUsrIDtwo(userID,'u') and regUsrIDtwo(userID,'a')

        idCounter += 1

        IF idCounter EQUALS 3 and tOrF EQUALS True:                                         # limit id tries

            OUTPUT("You have tried too many times, RETURNing you to previous menu.\n")

            startUser()



    SET tOrF TO True

    WHILE tOrF EQUALS True and passCount EQUALS True:        

        SET userPswd TO INPUT("\nPlease enter the user's Password: ")                    # ask FOR password

        # encrypt with Caesar cipher and check it against userid_pswd.csv, IF it's not a match, ask to re-enter

        SET encryptedPass TO encrypt(userPswd)

        SET tOrF TO usrPswd(userID,encryptedPass)



        passCounter += 1

        IF passCounter EQUALS 3 and tOrF EQUALS True:                                       #limit password tries

            OUTPUT("You have tried too many times.")

            SET passCount TO False

            startUser()

    

    beginQuiz()



############################################ Start of User Registration ############################################

DEFINE FUNCTION regUsr():

    SET tOrF TO True

        

    WHILE tOrF EQUALS True:

        SET userID TO INPUT("\nPlease enter the new user's ID: ")                        # ask FOR new user's userID

        SET verifyUserID TO checkComma(userID)

        IF verifyUserID EQUALS True:

            OUTPUT("Please do not enter a comma IN your ID.")

            SET tOrF TO True

        ELSE:

            SET tOrF TO regUsrIDone(verifyUserID)



    SET tOrF TO True

    WHILE tOrF EQUALS True:

        SET userPswd TO INPUT("\nPlease enter the new user's Password: ")                # ask FOR new user's passwd

        SET tOrF TO passcheck(userPswd)                                                  # check IF the passwd is secure



    SET encryptedPass TO encrypt(userPswd)                                               # encrypt passwd with Caesar Cipher



    SET tOrF TO True

    WHILE tOrF EQUALS True:

        SET scrtQn TO INPUT("\nPlease enter a secret recovery question.\n>>> ")              # ask FOR secret question

        SET verifyScrtQn TO checkComma(scrtQn)

        IF verifyScrtQn EQUALS True:

            OUTPUT("Please do not enter a comma IN your question.")

            SET tOrF TO True

        ELSE:

            SET tOrF TO False



    SET tOrF TO True

    WHILE tOrF EQUALS True:

        SET scrtAns TO INPUT("\nPlease enter your secret question's answer.\n>>> ")          # ask FOR secret question's answer

        SET verifyScrtAns TO checkComma(scrtAns)

        IF verifyScrtAns EQUALS True:

            OUTPUT("Please do not enter a comma IN your answer.")

            SET tOrF TO True

        ELSE:

            SET tOrF TO False



    # concatenate userID + userPswd + U + Attempts + secret question + secret question's answer'

    SET writeIntoFile TO (str(userID)+','+str(encryptedPass)+',u'+','+str(qzSettings(3)) + ',' + str(scrtQn) + ',' + str(scrtAns) )

    

    newUsr(writeIntoFile)                                                           # insert userID and passwd into userid_pswd.csv

        

    OUTPUT("\nRegistration Successful!\n")                                           # OUTPUT successful

    rmvSpaceID()

    startUser()                                                                     # startUser()

    

############################################ Start of Reset Password ############################################

DEFINE FUNCTION resetPassword():

    SET goOn TO False

    SET idCounter TO 0

    SET passCounter TO 0

    SET idCount TO True

    SET tOrF TO True

    SET passCount TO True



    WHILE tOrF EQUALS True and idCount EQUALS True:

        SET userID TO INPUT("\nPlease enter the user's ID: ")                             # ask FOR user's ID                          

        SET tOrF TO regUsrIDtwo(userID,'u') and regUsrIDtwo(userID,'a')

        idCounter += 1

        IF idCounter EQUALS 3 and tOrF EQUALS True:

            OUTPUT("You have tried too many times, RETURNing you to previous menu.\n")

            startUser()



    SET tOrF TO True

    WHILE tOrF EQUALS True and passCount EQUALS True:        

        SET secretAns TO INPUT(f'Q: {secretQ(userID)}\n>>> ')                             # ask user their secret question



        SET tOrF TO secretA(userID,secretAns)                                             # check IF user secret answer is correct

        

        passCounter += 1                                                             # limit answer tries

        IF passCounter EQUALS 3 and tOrF EQUALS True:

            OUTPUT("\nYou have tried too many times.\n")

            SET passCount TO False

            startUser()

    

    WHILE tOrF EQUALS False:                                                                        

        SET userPswd TO INPUT("\nPlease enter the new user's Password: ")                 # ask FOR new user's passwd

        SET tOrF TO passcheck(userPswd)                                                   # check IF the passwd is secure

        

        IF tOrF EQUALS False:

            SET tOrF TO True

            SET goOn TO True

        ELSE:

            SET tOrF TO False



    WHILE goOn EQUALS True:

        SET encryptedPass TO encrypt(userPswd)                                            # encrypt passwd with Caesar Cipher

        editPswd(userID,encryptedPass)                                               # write password into userid_pswd.csv

        rmvSpaceID()

        SET goOn TO False

    startUser()



############################################ Start of User Application ############################################

DEFINE FUNCTION startUser():

    SET tOrF TO True

    OUTPUT("\n***Welcome to Quiz Application***")

    OUTPUT("a) Start Quiz Application")

    OUTPUT("b) Register User Account")

    OUTPUT("c) Reset Password")

    OUTPUT("d) Exit")



    WHILE tOrF EQUALS True:

        SET userInput TO INPUT("Enter (a) to (c) to continue, (d) to exit: ")

        SET tOrF TO abcd(userInput)



    IF userInput EQUALS "a":                                                             # start quiz application, allow user to login

        usrLogin()

    ELSEIF userInput EQUALS "b":                                                           # allow user to register new account

        regUsr()

    ELSEIF userInput EQUALS "c":                                                           # allow user to reset their password

        resetPassword()

    ELSEIF userInput EQUALS "d":                                                           # allow user to exit program

        exit()



startUser()
